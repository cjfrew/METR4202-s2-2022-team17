import math
from pyexpat.errors import XML_ERROR_UNDECLARING_PREFIX

import numpy as np
import numpy as np
 
def euler_from_quaternion(x, y, z, w):
        """
        Convert a quaternion into euler angles (roll, pitch, yaw)
        roll is rotation around x in radians (counterclockwise)
        pitch is rotation around y in radians (counterclockwise)
        yaw is rotation around z in radians (counterclockwise)
        """
        t0 = +2.0 * (w * x + y * z)
        t1 = +1.0 - 2.0 * (x * x + y * y)
        roll_x = math.atan2(t0, t1)
     
        t2 = +2.0 * (w * y - z * x)
        t2 = +1.0 if t2 > +1.0 else t2
        t2 = -1.0 if t2 < -1.0 else t2
        pitch_y = math.asin(t2)
     
        t3 = +2.0 * (w * z + x * y)
        t4 = +1.0 - 2.0 * (y * y + z * z)
        yaw_z = math.atan2(t3, t4)

        L=20 #length of cube
        R = np.array([[np.cos(yaw_z), -np.sin(yaw_z), 0],[np.sin(yaw_z), np.cos(yaw_z), 0],[0, 0, 1,]]) 
        Pb=np.array([[20],[0],[0]])
        Ps=np.dot(R,Pb) #position of center of cube referenced to its corner
        #Cube position referenced to camera
        xcc=100 #x position get from camera
        ycc=100 #y position get from camera
        #camera position referenced to base
        xbc=100 #x position get from camera
        ybc=100 #y position get from camera
        
        #get center of cube referenced to base

        xbct=Ps[0]+xcc+xbc
        ybct=Ps[1]+ycc+ybc
     
        return xbct, ybct # in radians